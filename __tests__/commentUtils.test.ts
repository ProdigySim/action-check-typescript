import { shortenMessage } from "../src/getBodyComment";

describe("#shortenMessage", () => {
  it('should shorten long type specifications', () => {
    const msg = `Overload 1 of 2, '(props: Omit<Omit<Pick<DetailedHTMLProps<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, "key" | keyof TdHTMLAttributes<...>> & { ...; } & { ...; }, "width"> & Partial<...>, "theme"> & { ...; } & { ...; }): ReactElement<...>', gave the following error.
      Type '{ children: string; bold: true; key: string; smallText: true; valignBottom: true; width: string; }' is not assignable to type 'IntrinsicAttributes & Omit<Omit<Pick<DetailedHTMLProps<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, "key" | keyof TdHTMLAttributes<HTMLTableDataCellElement>> & { ref?: ((instance: HTMLTableDataCellElement | null) => void) | RefObject<HTMLTableDataCellElement> | null | undefined; } & { width: string | number | undefined; }, "width"> & Partial<Pick<Pick<DetailedHTMLProps<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, "key" | keyof TdHTMLAttributes<HTMLTableDataCellElement>> & { ref?: ((instance: HTMLTableDataCellElement | null) => void) | RefObject<HTMLTableDataCellElement> | null | undefined; } & { width: string | number | undefined; }, "width">>, "theme"> & { theme?: any; } & { as?: undefined; forwardedAs?: undefined; }'`;
  
      expect(shortenMessage(msg)).toMatch(/'\(props: Omit<Omit<Pick<DetailedHTMLProps.*?\.\.\.'/);
      expect(shortenMessage(msg)).toMatch(/'\{ children: string; bold: true; .*?\.\.\.'/);
      expect(shortenMessage(msg)).toMatch(/'IntrinsicAttributes & Omit<Omit<Pick.*?\.\.\.'/);
  });
  it('should trim to maxLength', () => {
    const msg = `Overload 1 of 2, '(props: Omit<Omit<Pick<DetailedHTMLProps<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, "key" | keyof TdHTMLAttributes<...>> & { ...; } & { ...; }, "width"> & Partial<...>, "theme"> & { ...; } & { ...; }): ReactElement<...>', gave the following error.
      Type '{ children: string; bold: true; key: string; smallText: true; valignBottom: true; width: string; }' is not assignable to type 'IntrinsicAttributes & Omit<Omit<Pick<DetailedHTMLProps<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, "key" | keyof TdHTMLAttributes<HTMLTableDataCellElement>> & { ref?: ((instance: HTMLTableDataCellElement | null) => void) | RefObject<HTMLTableDataCellElement> | null | undefined; } & { width: string | number | undefined; }, "width"> & Partial<Pick<Pick<DetailedHTMLProps<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>, "key" | keyof TdHTMLAttributes<HTMLTableDataCellElement>> & { ref?: ((instance: HTMLTableDataCellElement | null) => void) | RefObject<HTMLTableDataCellElement> | null | undefined; } & { width: string | number | undefined; }, "width">>, "theme"> & { theme?: any; } & { as?: undefined; forwardedAs?: undefined; }'`;
  
      expect(shortenMessage(msg, 100)).toHaveLength(100);
  });

  it('should not mangle types with apostrophes in them', () => {
    const msg = `Type '{ className?: string | undefined; color?: string | undefined; height?: string | number | undefined; id?: string | undefined; lang?: string | undefined; max?: string | number | undefined; media?: string | undefined; method?: string | undefined; min?: string | number | undefined; name?: string | undefined; style?: CSSProperties | undefined; target?: string | undefined; type?: string | undefined; width?: string | number | undefined; role?: string | undefined; tabIndex?: number | undefined; crossOrigin?: "" | "anonymous" | "use-credentials" | undefined; accentHeight?: string | number | undefined; accumulate?: "none" | "sum" | undefined; additive?: "replace" | "sum" | undefined; alignmentBaseline?: "alphabetic" | "hanging" | "ideographic" | "mathematical" | "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "inherit" | undefined; allowReorder?: "no" | "yes" | undefined; alphabetic?: string | number | undefined; amplitude?: string | number | undefined; arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined; ascent?: string | number | undefined; attributeName?: string | undefined; attributeType?: string | undefined; autoReverse?: Booleanish | undefined; azimuth?: string | number | undefined; baseFrequency?: string | number | undefined; baselineShift?: string | number | undefined; baseProfile?: string | number | undefined; bbox?: string | number | undefined; begin?: string | number | undefined; bias?: string | number | undefined; by?: string | number | undefined; calcMode?: string | number | undefined; capHeight?: string | number | undefined; clip?: string | number | undefined; clipPath?: string | undefined; clipPathUnits?: string | number | undefined; clipRule?: string | number | undefined; colorInterpolation?: string | number | undefined; colorInterpolationFilters?: "auto" | "inherit" | "sRGB" | "linearRGB" | undefined; colorProfile?: string | number | undefined; colorRendering?: string | number | undefined; contentScriptType?: string | number | undefined; contentStyleType?: string | number | undefined; cursor?: string | number | undefined; cx?: string | number | undefined; cy?: string | number | undefined; d?: string | undefined; decelerate?: string | number | undefined; descent?: string | number | undefined; diffuseConstant?: string | number | undefined; direction?: string | number | undefined; display?: string | number | undefined; divisor?: string | number | undefined; dominantBaseline?: string | number | undefined; dur?: string | number | undefined; dx?: string | number | undefined; dy?: string | number | undefined; edgeMode?: string | number | undefined; elevation?: string | number | undefined; enableBackground?: string | number | undefined; end?: string | number | undefined; exponent?: string | number | undefined; externalResourcesRequired?: Booleanish | undefined; fill?: string | undefined; fillOpacity?: string | number | undefined; fillRule?: "inherit" | "nonzero" | "evenodd" | undefined; filter?: string | undefined; filterRes?: string | number | undefined; filterUnits?: string | number | undefined; floodColor?: string | number | undefined; floodOpacity?: string | number | undefined; focusable?: "auto" | Booleanish | undefined; fontFamily?: string | undefined; fontSize?: string | number | undefined; fontSizeAdjust?: string | number | undefined; fontStretch?: string | number | undefined; fontStyle?: string | number | undefined; fontVariant?: string | number | undefined; fontWeight?: string | number | undefined; format?: string | number | undefined; from?: string | number | undefined; fx?: string | number | undefined; fy?: string | number | undefined; g1?: string | number | undefined; g2?: string | number | undefined; glyphName?: string | number | undefined; glyphOrientationHorizontal?: string | number | undefined; glyphOrientationVertical?: string | number | undefined; glyphRef?: string | number | undefined; gradientTransform?: string | undefined; gradientUnits?: string | undefined; hanging?: string | number | undefined; horizAdvX?: string | number | undefined; horizOriginX?: string | number | undefined; href?: string | undefined; ideographic?: string | number | undefined; imageRendering?: string | number | undefined; in2?: string | number | undefined; in?: string | undefined; intercept?: string | number | undefined; k1?: string | number | undefined; k2?: string | number | undefined; k3?: string | number | undefined; k4?: string | number | undefined; k?: string | number | undefined; kernelMatrix?: string | number | undefined; kernelUnitLength?: string | number | undefined; kerning?: string | number | undefined; keyPoints?: string | number | undefined; keySplines?: string | number | undefined; keyTimes?: string | number | undefined; lengthAdjust?: string | number | undefined; letterSpacing?: string | number | undefined; lightingColor?: string | number | undefined; limitingConeAngle?: string | number | undefined; local?: string | number | undefined; markerEnd?: string | undefined; markerHeight?: string | number | undefined; markerMid?: string | undefined; markerStart?: string | undefined; markerUnits?: string | number | undefined; markerWidth?: string | number | undefined; mask?: string | undefined; maskContentUnits?: string | number | undefined; maskUnits?: string | number | undefined; mathematical?: string | number | undefined; mode?: string | number | undefined; numOctaves?: string | number | undefined; offset?: string | number | undefined; opacity?: string | number | undefined; operator?: string | number | undefined; order?: string | number | undefined; orient?: string | number | undefined; orientation?: string | number | undefined; origin?: string | number | undefined; overflow?: string | number | undefined; overlinePosition?: string | number | undefined; overlineThickness?: string | number | undefined; paintOrder?: string | number | undefined; panose1?: string | number | undefined; path?: string | undefined; pathLength?: string | number | undefined; patternContentUnits?: string | undefined; patternTransform?: string | number | undefined; patternUnits?: string | undefined; pointerEvents?: string | number | undefined; points?: string | undefined; pointsAtX?: string | number | undefined; pointsAtY?: string | number | undefined; pointsAtZ?: string | number | undefined; preserveAlpha?: Booleanish | undefined; preserveAspectRatio?: string | undefined; primitiveUnits?: string | number | undefined; r?: string | number | undefined; radius?: string | number | undefined; refX?: string | number | undefined; refY?: string | number | undefined; renderingIntent?: string | number | undefined; repeatCount?: string | number | undefined; repeatDur?: string | number | undefined; requiredExtensions?: string | number | undefined; requiredFeatures?: string | number | undefined; restart?: string | number | undefined; result?: string | undefined; rotate?: string | number | undefined; rx?: string | number | undefined; ry?: string | number | undefined; scale?: string | number | undefined; seed?: string | number | undefined; shapeRendering?: string | number | undefined; slope?: string | number | undefined; spacing?: string | number | undefined; specularConstant?: string | number | undefined; specularExponent?: string | number | undefined; speed?: string | number | undefined; spreadMethod?: string | undefined; startOffset?: string | number | undefined; stdDeviation?: string | number | undefined; stemh?: string | number | undefined; stemv?: string | number | undefined; stitchTiles?: string | number | undefined; stopColor?: string | undefined; stopOpacity?: string | number | undefined; strikethroughPosition?: string | number | undefined; strikethroughThickness?: string | number | undefined; string?: string | number | undefined; stroke?: string | undefined; strokeDasharray?: string | number | undefined; strokeDashoffset?: string | number | undefined; strokeLinecap?: "inherit" | "butt" | "round" | "square" | undefined; strokeLinejoin?: "inherit" | "round" | "miter" | "bevel" | undefined; strokeMiterlimit?: string | number | undefined; strokeOpacity?: string | number | undefined; strokeWidth?: string | number | undefined; surfaceScale?: string | number | undefined; systemLanguage?: string | number | undefined; tableValues?: string | number | undefined; targetX?: string | number | undefined; targetY?: string | number | undefined; textAnchor?: string | undefined; textDecoration?: string | number | undefined; textLength?: string | number | undefined; textRendering?: string | number | undefined; to?: string | number | undefined; transform?: string | undefined; u1?: string | number | undefined; u2?: string | number | undefined; underlinePosition?: string | number | undefined; underlineThickness?: string | number | undefined; unicode?: string | number | undefined; unicodeBidi?: string | number | undefined; unicodeRange?: string | number | undefined; unitsPerEm?: string | number | undefined; vAlphabetic?: string | number | undefined; values?: string | undefined; vectorEffect?: string | number | undefined; version?: string | undefined; vertAdvY?: string | number | undefined; vertOriginX?: string | number | undefined; vertOriginY?: string | number | undefined; vHanging?: string | number | undefined; vIdeographic?: string | number | undefined; viewBox?: string | undefined; viewTarget?: string | number | undefined; visibility?: string | number | undefined; vMathematical?: string | number | undefined; widths?: string | number | undefined; wordSpacing?: string | number | undefined; writingMode?: string | number | undefined; x1?: string | number | undefined; x2?: string | number | undefined; x?: string | number | undefined; xChannelSelector?: string | undefined; xHeight?: string | number | undefined; xlinkActuate?: string | undefined; xlinkArcrole?: string | undefined; xlinkHref?: string | undefined; xlinkRole?: string | undefined; xlinkShow?: string | undefined; xlinkTitle?: string | undefined; xlinkType?: string | undefined; xmlBase?: string | undefined; xmlLang?: string | undefined; xmlns?: string | undefined; xmlnsXlink?: string | undefined; xmlSpace?: string | undefined; y1?: string | number | undefined; y2?: string | number | undefined; y?: string | number | undefined; yChannelSelector?: string | undefined; z?: string | number | undefined; zoomAndPan?: string | undefined; 'aria-activedescendant'?: string | undefined; 'aria-atomic'?: boolean | "false" | "true" | undefined; 'aria-autocomplete'?: "none" | "list" | "both" | "inline" | undefined; 'aria-busy'?: boolean | "false" | "true" | undefined; 'aria-checked'?: boolean | "false" | "true" | "mixed" | undefined; 'aria-colcount'?: number | undefined; 'aria-colindex'?: number | undefined; 'aria-colspan'?: number | undefined; 'aria-controls'?: string | undefined; 'aria-current'?: boolean | "false" | "time" | "true" | "step" | "location" | "page" | "date" | undefined; 'aria-describedby'?: string | undefined; 'aria-details'?: string | undefined; 'aria-disabled'?: boolean | "false" | "true" | undefined; 'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined; 'aria-errormessage'?: string | undefined; 'aria-expanded'?: boolean | "false" | "true" | undefined; 'aria-flowto'?: string | undefined; 'aria-grabbed'?: boolean | "false" | "true" | undefined; 'aria-haspopup'?: boolean | "false" | "dialog" | "menu" | "true" | "listbox" | "grid" | "tree" | undefined; 'aria-hidden'?: boolean | "false" | "true" | undefined; 'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined; 'aria-keyshortcuts'?: string | undefined; 'aria-label'?: string | undefined; 'aria-labelledby'?: string | undefined; 'aria-level'?: number | undefined; 'aria-live'?: "off" | "assertive" | "polite" | undefined; 'aria-modal'?: boolean | "false" | "true" | undefined; 'aria-multiline'?: boolean | "false" | "true" | undefined; 'aria-multiselectable'?: boolean | "false" | "true" | undefined; 'aria-orientation'?: "horizontal" | "vertical" | undefined; 'aria-owns'?: string | undefined; 'aria-placeholder'?: string | undefined; 'aria-posinset'?: number | undefined; 'aria-pressed'?: boolean | "false" | "true" | "mixed" | undefined; 'aria-readonly'?: boolean | "false" | "true" | undefined; 'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined; 'aria-required'?: boolean | "false" | "true" | undefined; 'aria-roledescription'?: string | undefined; 'aria-rowcount'?: number | undefined; 'aria-rowindex'?: number | undefined; 'aria-rowspan'?: number | undefined; 'aria-selected'?: boolean | "false" | "true" | undefined; 'aria-setsize'?: number | undefined; 'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined; 'aria-valuemax'?: number | undefined; 'aria-valuemin'?: number | undefined; 'aria-valuenow'?: number | undefined; 'aria-valuetext'?: string | undefined; children?: ReactNode; dangerouslySetInnerHTML?: { __html: string; } | undefined; onCopy?: ClipboardEventHandler<SVGSVGElement> | undefined; onCopyCapture?: ClipboardEventHandler<SVGSVGElement> | undefined; onCut?: ClipboardEventHandler<SVGSVGElement> | undefined; onCutCapture?: ClipboardEventHandler<SVGSVGElement> | undefined; onPaste?: ClipboardEventHandler<SVGSVGElement> | undefined; onPasteCapture?: ClipboardEventHandler<SVGSVGElement> | undefined; onCompositionEnd?: CompositionEventHandler<SVGSVGElement> | undefined; onCompositionEndCapture?: CompositionEventHandler<SVGSVGElement> | undefined; onCompositionStart?: CompositionEventHandler<SVGSVGElement> | undefined; onCompositionStartCapture?: CompositionEventHandler<SVGSVGElement> | undefined; onCompositionUpdate?: CompositionEventHandler<SVGSVGElement> | undefined; onCompositionUpdateCapture?: CompositionEventHandler<SVGSVGElement> | undefined; onFocus?: FocusEventHandler<SVGSVGElement> | undefined; onFocusCapture?: FocusEventHandler<SVGSVGElement> | undefined; onBlur?: FocusEventHandler<SVGSVGElement> | undefined; onBlurCapture?: FocusEventHandler<SVGSVGElement> | undefined; onChange?: FormEventHandler<SVGSVGElement> | undefined; onChangeCapture?: FormEventHandler<SVGSVGElement> | undefined; onBeforeInput?: FormEventHandler<SVGSVGElement> | undefined; onBeforeInputCapture?: FormEventHandler<SVGSVGElement> | undefined; onInput?: FormEventHandler<SVGSVGElement> | undefined; onInputCapture?: FormEventHandler<SVGSVGElement> | undefined; onReset?: FormEventHandler<SVGSVGElement> | undefined; onResetCapture?: FormEventHandler<SVGSVGElement> | undefined; onSubmit?: FormEventHandler<SVGSVGElement> | undefined; onSubmitCapture?: FormEventHandler<SVGSVGElement> | undefined; onInvalid?: FormEventHandler<SVGSVGElement> | undefined; onInvalidCapture?: FormEventHandler<SVGSVGElement> | undefined; onLoad?: ReactEventHandler<SVGSVGElement> | undefined; onLoadCapture?: ReactEventHandler<SVGSVGElement> | undefined; onError?: ReactEventHandler<SVGSVGElement> | undefined; onErrorCapture?: ReactEventHandler<SVGSVGElement> | undefined; onKeyDown?: KeyboardEventHandler<SVGSVGElement> | undefined; onKeyDownCapture?: KeyboardEventHandler<SVGSVGElement> | undefined; onKeyPress?: KeyboardEventHandler<SVGSVGElement> | undefined; onKeyPressCapture?: KeyboardEventHandler<SVGSVGElement> | undefined; onKeyUp?: KeyboardEventHandler<SVGSVGElement> | undefined; onKeyUpCapture?: KeyboardEventHandler<SVGSVGElement> | undefined; onAbort?: ReactEventHandler<SVGSVGElement> | undefined; onAbortCapture?: ReactEventHandler<SVGSVGElement> | undefined; onCanPlay?: ReactEventHandler<SVGSVGElement> | undefined; onCanPlayCapture?: ReactEventHandler<SVGSVGElement> | undefined; onCanPlayThrough?: ReactEventHandler<SVGSVGElement> | undefined; onCanPlayThroughCapture?: ReactEventHandler<SVGSVGElement> | undefined; onDurationChange?: ReactEventHandler<SVGSVGElement> | undefined; onDurationChangeCapture?: ReactEventHandler<SVGSVGElement> | undefined; onEmptied?: ReactEventHandler<SVGSVGElement> | undefined; onEmptiedCapture?: ReactEventHandler<SVGSVGElement> | undefined; onEncrypted?: ReactEventHandler<SVGSVGElement> | undefined; onEncryptedCapture?: ReactEventHandler<SVGSVGElement> | undefined; onEnded?: ReactEventHandler<SVGSVGElement> | undefined; onEndedCapture?: ReactEventHandler<SVGSVGElement> | undefined; onLoadedData?: ReactEventHandler<SVGSVGElement> | undefined; onLoadedDataCapture?: ReactEventHandler<SVGSVGElement> | undefined; onLoadedMetadata?: ReactEventHandler<SVGSVGElement> | undefined; onLoadedMetadataCapture?: ReactEventHandler<SVGSVGElement> | undefined; onLoadStart?: ReactEventHandler<SVGSVGElement> | undefined; onLoadStartCapture?: ReactEventHandler<SVGSVGElement> | undefined; onPause?: ReactEventHandler<SVGSVGElement> | undefined; onPauseCapture?: ReactEventHandler<SVGSVGElement> | undefined; onPlay?: ReactEventHandler<SVGSVGElement> | undefined; onPlayCapture?: ReactEventHandler<SVGSVGElement> | undefined; onPlaying?: ReactEventHandler<SVGSVGElement> | undefined; onPlayingCapture?: ReactEventHandler<SVGSVGElement> | undefined; onProgress?: ReactEventHandler<SVGSVGElement> | undefined; onProgressCapture?: ReactEventHandler<SVGSVGElement> | undefined; onRateChange?: ReactEventHandler<SVGSVGElement> | undefined; onRateChangeCapture?: ReactEventHandler<SVGSVGElement> | undefined; onSeeked?: ReactEventHandler<SVGSVGElement> | undefined; onSeekedCapture?: ReactEventHandler<SVGSVGElement> | undefined; onSeeking?: ReactEventHandler<SVGSVGElement> | undefined; onSeekingCapture?: ReactEventHandler<SVGSVGElement> | undefined; onStalled?: ReactEventHandler<SVGSVGElement> | undefined; onStalledCapture?: ReactEventHandler<SVGSVGElement> | undefined; onSuspend?: ReactEventHandler<SVGSVGElement> | undefined; onSuspendCapture?: ReactEventHandler<SVGSVGElement> | undefined; onTimeUpdate?: ReactEventHandler<SVGSVGElement> | undefined; onTimeUpdateCapture?: ReactEventHandler<SVGSVGElement> | undefined; onVolumeChange?: ReactEventHandler<SVGSVGElement> | undefined; onVolumeChangeCapture?: ReactEventHandler<SVGSVGElement> | undefined; onWaiting?: ReactEventHandler<SVGSVGElement> | undefined; onWaitingCapture?: ReactEventHandler<SVGSVGElement> | undefined; onAuxClick?: MouseEventHandler<SVGSVGElement> | undefined; onAuxClickCapture?: MouseEventHandler<SVGSVGElement> | undefined; onClick?: MouseEventHandler<SVGSVGElement> | undefined; onClickCapture?: MouseEventHandler<SVGSVGElement> | undefined; onContextMenu?: MouseEventHandler<SVGSVGElement> | undefined; onContextMenuCapture?: MouseEventHandler<SVGSVGElement> | undefined; onDoubleClick?: MouseEventHandler<SVGSVGElement> | undefined; onDoubleClickCapture?: MouseEventHandler<SVGSVGElement> | undefined; onDrag?: DragEventHandler<SVGSVGElement> | undefined; onDragCapture?: DragEventHandler<SVGSVGElement> | undefined; onDragEnd?: DragEventHandler<SVGSVGElement> | undefined; onDragEndCapture?: DragEventHandler<SVGSVGElement> | undefined; onDragEnter?: DragEventHandler<SVGSVGElement> | undefined; onDragEnterCapture?: DragEventHandler<SVGSVGElement> | undefined; onDragExit?: DragEventHandler<SVGSVGElement> | undefined; onDragExitCapture?: DragEventHandler<SVGSVGElement> | undefined; onDragLeave?: DragEventHandler<SVGSVGElement> | undefined; onDragLeaveCapture?: DragEventHandler<SVGSVGElement> | undefined; onDragOver?: DragEventHandler<SVGSVGElement> | undefined; onDragOverCapture?: DragEventHandler<SVGSVGElement> | undefined; onDragStart?: DragEventHandler<SVGSVGElement> | undefined; onDragStartCapture?: DragEventHandler<SVGSVGElement> | undefined; onDrop?: DragEventHandler<SVGSVGElement> | undefined; onDropCapture?: DragEventHandler<SVGSVGElement> | undefined; onMouseDown?: MouseEventHandler<SVGSVGElement> | undefined; onMouseDownCapture?: MouseEventHandler<SVGSVGElement> | undefined; onMouseEnter?: MouseEventHandler<SVGSVGElement> | undefined; onMouseLeave?: MouseEventHandler<SVGSVGElement> | undefined; onMouseMove?: MouseEventHandler<SVGSVGElement> | undefined; onMouseMoveCapture?: MouseEventHandler<SVGSVGElement> | undefined; onMouseOut?: MouseEventHandler<SVGSVGElement> | undefined; onMouseOutCapture?: MouseEventHandler<SVGSVGElement> | undefined; onMouseOver?: MouseEventHandler<SVGSVGElement> | undefined; onMouseOverCapture?: MouseEventHandler<SVGSVGElement> | undefined; onMouseUp?: MouseEventHandler<SVGSVGElement> | undefined; onMouseUpCapture?: MouseEventHandler<SVGSVGElement> | undefined; onSelect?: ReactEventHandler<SVGSVGElement> | undefined; onSelectCapture?: ReactEventHandler<SVGSVGElement> | undefined; onTouchCancel?: TouchEventHandler<SVGSVGElement> | undefined; onTouchCancelCapture?: TouchEventHandler<SVGSVGElement> | undefined; onTouchEnd?: TouchEventHandler<SVGSVGElement> | undefined; onTouchEndCapture?: TouchEventHandler<SVGSVGElement> | undefined; onTouchMove?: TouchEventHandler<SVGSVGElement> | undefined; onTouchMoveCapture?: TouchEventHandler<SVGSVGElement> | undefined; onTouchStart?: TouchEventHandler<SVGSVGElement> | undefined; onTouchStartCapture?: TouchEventHandler<SVGSVGElement> | undefined; onPointerDown?: PointerEventHandler<SVGSVGElement> | undefined; onPointerDownCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerMove?: PointerEventHandler<SVGSVGElement> | undefined; onPointerMoveCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerUp?: PointerEventHandler<SVGSVGElement> | undefined; onPointerUpCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerCancel?: PointerEventHandler<SVGSVGElement> | undefined; onPointerCancelCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerEnter?: PointerEventHandler<SVGSVGElement> | undefined; onPointerEnterCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerLeave?: PointerEventHandler<SVGSVGElement> | undefined; onPointerLeaveCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerOver?: PointerEventHandler<SVGSVGElement> | undefined; onPointerOverCapture?: PointerEventHandler<SVGSVGElement> | undefined; onPointerOut?: PointerEventHandler<SVGSVGElement> | undefined; onPointerOutCapture?: PointerEventHandler<SVGSVGElement> | undefined; onGotPointerCapture?: PointerEventHandler<SVGSVGElement> | undefined; onGotPointerCaptureCapture?: PointerEventHandler<SVGSVGElement> | undefined; onLostPointerCapture?: PointerEventHandler<SVGSVGElement> | undefined; onLostPointerCaptureCapture?: PointerEventHandler<SVGSVGElement> | undefined; onScroll?: UIEventHandler<SVGSVGElement> | undefined; onScrollCapture?: UIEventHandler<SVGSVGElement> | undefined; onWheel?: WheelEventHandler<SVGSVGElement> | undefined; onWheelCapture?: WheelEventHandler<SVGSVGElement> | undefined; onAnimationStart?: AnimationEventHandler<SVGSVGElement> | undefined; onAnimationStartCapture?: AnimationEventHandler<SVGSVGElement> | undefined; onAnimationEnd?: AnimationEventHandler<SVGSVGElement> | undefined; onAnimationEndCapture?: AnimationEventHandler<SVGSVGElement> | undefined; onAnimationIteration?: AnimationEventHandler<SVGSVGElement> | undefined; onAnimationIterationCapture?: AnimationEventHandler<SVGSVGElement> | undefined; onTransitionEnd?: TransitionEventHandler<SVGSVGElement> | undefined; onTransitionEndCapture?: TransitionEventHandler<SVGSVGElement> | undefined; ref?: LegacyRef<SVGSVGElement> | undefined; key?: Key | null | undefined; }' is not assignable to type '{ ref?: ((instance: SVGSVGElement | null) => void) | RefObject<SVGSVGElement> | null | undefined; }'.`;
    expect(shortenMessage(msg)).toMatch(
      /^Type '\{ className\?: string \| undefined; color\?:[^']*\.\.\.' is not assignable to type/
    );
  })
});